@page "/"

<!-- Begin Content -->
<div class="splash-container">
    <div class="splash">
        <p class="splash-subhead">Amount Earned:</p>
        <h1 class="splash-head"><span id="amountearned" style="font-size:larger;">$@wageTimer.CurrentEarnings.ToString("N2")</span></h1>
        <p class="splash-subhead">
            <noscript style="color:red;">Sorry, you need javascript to run this :(</noscript>
        </p>
        <div class="splash-subhead">
            Input your wage per hour:
            <div>
                <input id="wageinput" size="10" type="text" bind="@wageTimer.InputValue" />
            </div>
            <div>
                <span id="errormessage" style="color:red;">@wageTimer.ErrorMessage</span>
            </div>
        </div>
        <p>
            <button class="pure-button pure-button-primary" id="startbutton" onclick="@wageTimer.StartButtonClicked">@wageTimer.StartButtonText</button>
            <button class="pure-button pure-button-primary" id="resetbutton" onclick="@wageTimer.ResetButtonClicked">Reset</button>
        </p>
        <p class="splash-subhead">
            Use this tool to see how much money you've made (or lost) since starting the timer.
        </p>
    </div>
</div>
<!-- End Content -->

@functions{

    WageTimer wageTimer;

    protected override void OnInit()
    {
        wageTimer = new WageTimer();
        wageTimer.OnTick += StateHasChanged;
    }

    class WageTimer : IDisposable
    {
        // ---------------- Enums ----------------

        enum State
        {
            Idle,
            Running
        }

        // ---------------- Events ----------------

        public event Action OnTick;

        // ---------------- Fields ----------------

        private State currentState;

        private Timer timer;

        /// <summary>
        /// Update timer every 1 second.
        /// </summary>
        private const int timerDelay = 1000;

        // ---------------- Constructor ----------------

        public WageTimer()
        {
            this.InputValue = string.Empty;
            this.ErrorMessage = string.Empty;
            this.CurrentEarnings = 0;
            this.CurrentWage = 0;

            this.StartButtonText = "Start";

            this.currentState = State.Idle;

            this.timer = new Timer( this.OnTimerExpired, null, timerDelay, timerDelay );
        }

        // ---------------- Properties ----------------

        public string InputValue { get; set; }

        public string ErrorMessage { get; private set; }

        public decimal CurrentEarnings { get; private set; }

        public decimal CurrentWage { get; private set; }

        public string StartButtonText { get; private set; }

        // ---------------- Functions ----------------

        public void StartButtonClicked()
        {
            if( currentState == State.Idle )
            {
                if(decimal.TryParse(this.InputValue, out decimal value))
                {
                    this.CurrentWage = value;
                    this.StartButtonText = "Stop";
                    this.currentState = State.Running;
                    this.ErrorMessage = string.Empty;
                }
                else
                {
                    this.ErrorMessage = "Input value is not a decimal number.";
                }
            }
            else
            {
                this.StartButtonText = "Start";
                this.currentState = State.Idle;
            }
        }

        public void ResetButtonClicked()
        {
            this.CurrentEarnings = 0;
        }

        public void Dispose()
        {
            this.timer.Dispose();
        }

        private void OnTimerExpired( object sender )
        {
            if( this.currentState == State.Running )
            {
                // Convert our wage per hour to seconds, and then add it to our total amount.
                this.CurrentEarnings += ( this.CurrentWage / 60 / 60 );

                this.OnTick?.Invoke();
            }
        }
    }
}